{"version":3,"file":"cm.min.js","sources":["../../../src/local/courseindex/cm.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index cm component.\n *\n * This component is used to control specific course modules interactions like drag and drop.\n *\n * @module     core_courseformat/local/courseindex/cm\n * @class      core_courseformat/local/courseindex/cm\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\nimport Templates from 'core/templates';\nimport Prefetch from 'core/prefetch';\nimport Config from 'core/config';\n\n// Prefetch the completion icons template.\nconst completionTemplate = 'core_courseformat/local/courseindex/cmcompletion';\nPrefetch.prefetchTemplate(completionTemplate);\n\nexport default class Component extends DndCmItem {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex_cm';\n        // Default query selectors.\n        this.selectors = {\n            CM_NAME: `[data-for='cm_name']`,\n            CM_COMPLETION: `[data-for='cm_completion']`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            CMHIDDEN: 'dimmed',\n            LOCKED: 'editinprogress',\n            RESTRICTIONS: 'restrictions',\n            PAGEITEM: 'pageitem',\n        };\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the course state.\n     */\n    stateReady(state) {\n        this.configDragDrop(this.id);\n        const cm = state.cm.get(this.id);\n        const course = state.course;\n        // Refresh completion icon.\n        this._refreshCompletion({\n            state,\n            element: cm,\n        });\n        const url = new URL(window.location.href);\n        const anchor = url.hash.replace('#', '');\n        // Check if the current url is the cm url.\n        if (window.location.href == cm.url\n            || (window.location.href.includes(course.baseurl) && anchor == cm.anchor)\n        ) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Check if this we are displaying this activity page.\n        if (Config.contextid != Config.courseContextId && Config.contextInstanceId == this.id) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id, true);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Add anchor logic if the element is not user visible.\n        if (!cm.uservisible) {\n            this.addEventListener(\n                this.getElement(this.selectors.CM_NAME),\n                'click',\n                this._activityAnchor,\n            );\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `cm[${this.id}]:deleted`, handler: this.remove},\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\n            {watch: `cm[${this.id}].completionstate:updated`, handler: this._refreshCompletion},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n        ];\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCm({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.CMHIDDEN, !element.visible);\n        this.getElement(this.selectors.CM_NAME).innerHTML = element.name;\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.element.classList.toggle(this.classes.RESTRICTIONS, element.hascmrestrictions ?? false);\n        this.locked = element.locked;\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.element the course state data.\n     */\n    _refreshPageItem({element}) {\n        if (!element.pageItem) {\n            return;\n        }\n        const isPageId = (element.pageItem.type == 'cm' && element.pageItem.id == this.id);\n        this.element.classList.toggle(this.classes.PAGEITEM, isPageId);\n        if (isPageId && !this.reactive.isEditing) {\n            this.element.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    /**\n     * Update the activity completion icon.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data\n     * @param {Object} details.element the element data\n     */\n    async _refreshCompletion({state, element}) {\n        // No completion icons are displayed in edit mode.\n        if (this.reactive.isEditing || !element.istrackeduser) {\n            return;\n        }\n        // Check if the completion value has changed.\n        const completionElement = this.getElement(this.selectors.CM_COMPLETION);\n        if (completionElement.dataset.value == element.completionstate) {\n            return;\n        }\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cmCompletion(state, element);\n\n        try {\n            const {html, js} = await Templates.renderForPromise(completionTemplate, data);\n            Templates.replaceNode(completionElement, html, js);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * The activity anchor event.\n     *\n     * @param {Event} event\n     */\n    _activityAnchor(event) {\n        const cm = this.reactive.get('cm', this.id);\n        // If the user cannot access the element but the element is present in the page\n        // the new url should be an anchor link.\n        const element = document.getElementById(cm.anchor);\n        if (element) {\n            // Marc the element as page item once the event is handled.\n            setTimeout(() => {\n                this.reactive.dispatch('setPageItem', 'cm', cm.id);\n            }, 50);\n            return;\n        }\n        // If the element is not present in the page we need to go to the specific section.\n        const course = this.reactive.get('course');\n        const section = this.reactive.get('section', cm.sectionid);\n        if (!section) {\n            return;\n        }\n        const url = `${course.baseurl}&section=${section.number}#${cm.anchor}`;\n        event.preventDefault();\n        window.location = url;\n    }\n}\n"],"names":["_interopRequireDefault","obj","__esModule","default","_dndcmitem","_templates","_prefetch","_config","Prefetch","prefetchTemplate","Component","DndCmItem","create","this","name","selectors","CM_NAME","CM_COMPLETION","classes","CMHIDDEN","LOCKED","RESTRICTIONS","PAGEITEM","id","element","dataset","static","target","document","getElementById","stateReady","state","configDragDrop","cm","get","course","_refreshCompletion","anchor","URL","window","location","href","hash","replace","url","includes","baseurl","reactive","dispatch","scrollIntoView","block","Config","contextid","courseContextId","contextInstanceId","uservisible","addEventListener","getElement","_activityAnchor","getWatchers","watch","concat","handler","remove","_refreshCm","_refreshPageItem","_ref","_element$dragging","_element$locked","_element$hascmrestric","classList","toggle","visible","innerHTML","DRAGGING","dragging","locked","hascmrestrictions","_ref2","pageItem","isPageId","type","isEditing","async","_ref3","istrackeduser","completionElement","value","completionstate","data","getExporter","cmCompletion","html","js","Templates","renderForPromise","replaceNode","error","event","setTimeout","section","sectionid","number","preventDefault","_exports"],"mappings":"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"}